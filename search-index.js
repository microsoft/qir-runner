var searchIndex = JSON.parse('{\
"qir_backend":{"doc":"QIR compliant backend for quantum simulation.","t":"DNRRDEDDNNNFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAALLAFLLMALLLAAAAFFFAFFAFMMALLLALLDFFFFFFFLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFRRDFFFFFFLLLLLLLALFFLLLLLLLFFFFFFFFFDLLMLLFFMMLLLLFFFFFFFFFFFFFFFFFFFF","n":["Callable","I","LINE_ENDING","OUTPUT","OutputRecorder","Pauli","QirArray","Range","X","Y","Z","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__assertmeasurementprobability__body","__quantum__qis__assertmeasurementprobability__ctl","__quantum__qis__ccx__body","__quantum__qis__cnot__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__cx__body","__quantum__qis__cy__body","__quantum__qis__cz__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__dumpmachine__body","__quantum__qis__h__body","__quantum__qis__h__ctl","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__m__body","__quantum__qis__measure__body","__quantum__qis__mresetz__body","__quantum__qis__mz__body","__quantum__qis__nan__body","__quantum__qis__r__adj","__quantum__qis__r__body","__quantum__qis__r__ctl","__quantum__qis__r__ctladj","__quantum__qis__read_result__body","__quantum__qis__reset__body","__quantum__qis__rx__body","__quantum__qis__rx__ctl","__quantum__qis__rxx__body","__quantum__qis__ry__body","__quantum__qis__ry__ctl","__quantum__qis__ryy__body","__quantum__qis__rz__body","__quantum__qis__rz__ctl","__quantum__qis__rzz__body","__quantum__qis__s__adj","__quantum__qis__s__body","__quantum__qis__s__ctl","__quantum__qis__s__ctladj","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__swap__body","__quantum__qis__t__adj","__quantum__qis__t__body","__quantum__qis__t__ctl","__quantum__qis__t__ctladj","__quantum__qis__tan__body","__quantum__qis__tanh__body","__quantum__qis__x__body","__quantum__qis__x__ctl","__quantum__qis__y__body","__quantum__qis__y__ctl","__quantum__qis__z__body","__quantum__qis__z__ctl","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_record_output","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_to_string","__quantum__rt__bigint_update_reference_count","__quantum__rt__bool_record_output","__quantum__rt__bool_to_string","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","__quantum__rt__double_record_output","__quantum__rt__double_to_string","__quantum__rt__fail","__quantum__rt__initialize","__quantum__rt__int_record_output","__quantum__rt__int_to_string","__quantum__rt__memory_allocate","__quantum__rt__message","__quantum__rt__message_record_output","__quantum__rt__pauli_to_string","__quantum__rt__qubit_allocate","__quantum__rt__qubit_allocate_array","__quantum__rt__qubit_release","__quantum__rt__qubit_release_array","__quantum__rt__qubit_to_string","__quantum__rt__result_record_output","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_record_output","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count","arrays","bigints","borrow","borrow_mut","callables","capture_quantum_state","clone","clone_into","end","exp","fmt","from","into","legacy","legacy_output","math","output_recording","quantum__rt__array_slice_1d","quantum__rt__range_to_string","qubit_is_zero","range_support","record_output","record_output_str","result_bool","set_rng_seed","start","step","strings","to_owned","try_from","try_into","tuples","type_id","vzip","QirArray","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_update_reference_count","Callable","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__qis__exp__adj","__quantum__qis__exp__body","__quantum__qis__exp__ctl","__quantum__qis__exp__ctladj","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","__quantum__rt__result_record_output","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__nan__body","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__tan__body","__quantum__qis__tanh__body","LINE_ENDING","OUTPUT","OutputRecorder","__quantum__rt__array_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__message_record_output","__quantum__rt__tuple_record_output","borrow","borrow_mut","default","drain","flush","from","into","legacy","read","record_output","record_output_str","try_from","try_into","type_id","use_std_out","vzip","write","write_newline","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","Range","borrow","borrow_mut","end","from","into","quantum__rt__array_slice_1d","quantum__rt__range_to_string","start","step","try_from","try_into","type_id","vzip","__quantum__rt__result_equal","__quantum__rt__result_get_one","__quantum__rt__result_get_zero","__quantum__rt__result_to_string","__quantum__rt__result_update_reference_count","__quantum__rt__bigint_to_string","__quantum__rt__bool_to_string","__quantum__rt__double_to_string","__quantum__rt__int_to_string","__quantum__rt__pauli_to_string","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count"],"q":[[0,"qir_backend"],[177,"qir_backend::arrays"],[197,"qir_backend::bigints"],[218,"qir_backend::callables"],[239,"qir_backend::exp"],[243,"qir_backend::legacy"],[252,"qir_backend::legacy_output"],[253,"qir_backend::math"],[273,"qir_backend::output_recording"],[300,"qir_backend::output_recording::legacy"],[309,"qir_backend::range_support"],[323,"qir_backend::result_bool"],[328,"qir_backend::strings"],[339,"qir_backend::tuples"],[343,"core::ffi"],[344,"core::ffi"],[345,"alloc::vec"],[346,"num_bigint::bigint"],[347,"core::ffi"],[348,"num_complex"],[349,"core::fmt"],[350,"core::fmt"],[351,"core::fmt"],[352,"core::any"],[353,"std::os::raw"],[354,"alloc::vec::drain"]],"d":["","","","","Holds output messages from calls to the QIR output …","","","","","","","","","","","QIR API for checking internal simulator state and …","QIR API for checking internal simulator state and …","QIR API for performing the CCNOT gate with the given …","QIR API for performing the CNOT gate with the given qubits.","","","QIR API for performing the CNOT gate with the given qubits.","QIR API for performing the CY gate with the given qubits.","QIR API for performing the CZ gate with the given qubits.","","","QIR API for dumping full internal simulator state.","QIR API for performing the H gate on the given qubit.","QIR API for performing the multicontrolled H gate with the …","","","","","","","QIR API that measures a given qubit in the computational …","QIR API that performs joint measurement of the given …","QIR API for measuring the given qubit and storing the …","QIR API for measuring the given qubit in the computation …","","QIR API for applying an adjoint rotation about the given …","QIR API for applying a rotation about the given Pauli axis …","QIR API for applying a controlled rotation about the given …","QIR API for applying an adjoint controlled rotation about …","QIR API that reads the Boolean value corresponding to the …","QIR API for resetting the given qubit in the computational …","QIR API for applying a Pauli-X rotation with the given …","QIR API for applying a multicontrolled Pauli-X rotation …","QIR API for applying a joint rotation Pauli-Y rotation …","QIR API for applying a Pauli-Y rotation with the given …","QIR API for applying a multicontrolled Pauli-Y rotation …","QIR API for applying a joint rotation Pauli-Y rotation …","QIR API for applying a Pauli-Z rotation with the given …","QIR API for applying a multicontrolled Pauli-Z rotation …","QIR API for applying a joint rotation Pauli-Z rotation …","QIR API for performing the Adjoint S gate on the given …","QIR API for performing the S gate on the given qubit.","QIR API for performing the multicontrolled S gate with the …","QIR API for performing the multicontrolled Adjoint S gate …","","","","QIR API for applying a SWAP gate to the given qubits.","QIR API for performing the Adjoint T gate on the given …","QIR API for performing the T gate on the given qubit.","QIR API for performing the multicontrolled T gate with the …","QIR API for performing the multicontrolled Adjoint T gate …","","","QIR API for performing the X gate on the given qubit.","QIR API for performing the multicontrolled X gate with the …","QIR API for performing the Y gate on the given qubit.","QIR API for performing the multicontrolled Y gate with the …","QIR API for performing the Z gate on the given qubit.","QIR API for performing the multicontrolled Z gate with the …","","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes the execution environment.","","","","","","","QIR API that allocates the next available qubit in the …","QIR API for allocating the given number of qubits in the …","QIR API for releasing the given qubit from the simulation.","QIR API for releasing the given runtime managed qubit …","QIR API for getting the string interpretation of a qubit …","QIR API for recording the given result into the program …","","","","","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","Rust API for getting a snapshot of current quantum state. …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Rust API for checking internal simulator state and …","","Records a value to the output.","Records a string to the output.","","Sets the seed for the pseudo-random number generator used …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","QIR API for applying an adjoint exponential of a …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds output messages from calls to the QIR output …","Inserts a marker in the generated output that indicates the","","","","","Inserts a marker in the generated output that indicates the","","","","Drains the buffer and returns the contents.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Records a value to the output.","Records a string to the output.","","","","Sets whether the output should be written to stdout or …","","","Writes the newline char(s) to the output.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Panics","","","","","","","","","","","","","","","",""],"i":[0,10,0,0,0,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,10,10,25,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,25,25,0,10,10,10,0,10,10,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,31,31,31,31,31,0,31,0,0,31,31,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,25,25,25,25,25,0,0,25,25,25,25,25,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],[[1,1],1],[1,1],[[2,2,3,4,5,4],6],[[2,7],6],[[3,3,3],6],[[3,3],6],[1,1],[1,1],[[3,3],6],[[3,3],6],[[3,3],6],[[1,1],1],[[8,8],8],[3,6],[3,6],[[2,3],6],[[1,1],1],[[],1],[1,9],[1,9],[1,9],[1,1],[3,3],[[2,2],3],[[3,3],6],[[3,3],6],[[],1],[[10,4,3],6],[[10,4,3],6],[[2,7],6],[[2,7],6],[3,9],[3,6],[[4,3],6],[[2,7],6],[[4,3,3],6],[[4,3],6],[[2,7],6],[[4,3,3],6],[[4,3],6],[[2,7],6],[[4,3,3],6],[3,6],[3,6],[[2,3],6],[[2,3],6],[1,1],[1,1],[1,1],[[3,3],6],[3,6],[3,6],[[2,3],6],[[2,3],6],[1,1],[1,1],[3,6],[[2,3],6],[3,6],[[2,3],6],[3,6],[[2,3],6],[[2,2],2],[[2,9],2],[[11,12],2],[[2,12],13],[2,12],[[8,13],6],[[2,14],6],[[2,14],6],[[15,15],15],[[15,15],15],[15,15],[[15,15],15],[[15,15],15],[[11,16],15],[8,15],[[15,15],15],[[15,15],9],[15,16],[15,11],[[15,15],9],[[15,15],9],[[15,15],15],[[15,15],15],[15,15],[[15,11],15],[[15,12],15],[[15,12],15],[[15,15],15],[15,5],[[15,14],6],[[9,13],6],[9,5],[[17,9],17],[[16,16,16],17],[[17,16,16],6],[17,6],[17,6],[[17,14],6],[[17,14],6],[[17,14],6],[[17,14],6],[[1,13],6],[1,5],[5,6],[18,6],[[8,13],6],[8,5],[12,16],[5,6],[5,6],[10,5],[[],3],[12,2],[3,6],[2,6],[3,5],[[3,18],6],[[5,5],5],[13,5],[[5,5],9],[5,13],[5,11],[[5,14],6],[[7,9],7],[12,7],[[8,13],6],[[7,14],6],[[7,14],6],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[6,[[7,[[6,[19,20]]]],21]]]],[10,10],[[-1,-2],6,[],[]],0,0,[[10,22],[[24,[6,23]]]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,[[2,25],2],[25,5],[3,9],0,[[26,27,13],[[24,[6,28]]]],[26,[[24,[6,28]]]],0,[12,6],0,0,0,[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],0,[-1,29,[]],[-1,-2,[],[]],0,[[2,2],2],[[2,9],2],[[11,12],2],[[2,12],13],[2,12],[[2,14],6],[[2,14],6],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],6,[],[]],[[2,22],[[24,[6,23]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,29,[]],[-1,-2,[],[]],[[15,15],15],[[15,15],15],[15,15],[[15,15],15],[[15,15],15],[[11,16],15],[8,15],[[15,15],15],[[15,15],9],[15,16],[15,11],[[15,15],9],[[15,15],9],[[15,15],15],[[15,15],15],[15,15],[[15,11],15],[[15,12],15],[[15,12],15],[[15,15],15],[[15,14],6],0,[[17,9],17],[[16,16,16],17],[[17,16,16],6],[17,6],[17,6],[[17,14],6],[[17,14],6],[[17,14],6],[[17,14],6],[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[[-1,-2],6,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,29,[]],[-1,-2,[],[]],[[2,30,2],6],[[2,30,2],6],[[2,7],6],[[2,7],6],[[],6],[8,6],[[],6],[9,6],[1,6],[8,6],[[],6],[8,6],[[],6],[3,6],[1,1],[1,1],[[1,1],1],[1,1],[1,1],[1,1],[[1,1],1],[[8,8],8],[[1,1],1],[[],1],[1,9],[1,9],[1,9],[1,1],[[],1],[1,1],[1,1],[1,1],[1,1],[1,1],0,0,0,[[8,13],6],[[9,13],6],[[1,13],6],[[8,13],6],[5,6],[[8,13],6],[-1,-2,[],[]],[-1,-2,[],[]],[[],31],[31,[[32,[16]]]],[31,[[24,[6,28]]]],[-1,-1,[]],[-1,-2,[],[]],0,[[31,[33,[16]]],[[24,[21,28]]]],[[26,27,13],[[24,[6,28]]]],[26,[[24,[6,28]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,29,[]],[[31,9],6],[-1,-2,[],[]],[[31,[33,[16]]],[[24,[21,28]]]],[31,6],[[],6],[8,6],[[],6],[9,6],[1,6],[8,6],[[],6],[8,6],[[],6],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-2,[],[]],[[2,25],2],[25,5],0,0,[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,29,[]],[-1,-2,[],[]],[[3,3],9],[[],3],[[],3],[3,5],[[3,14],6],[15,5],[9,5],[1,5],[8,5],[10,5],[[5,5],5],[13,5],[[5,5],9],[5,13],[5,11],[[5,14],6],[[7,9],7],[12,7],[[7,14],6],[[7,14],6]],"c":[],"p":[[15,"f64"],[3,"QirArray",177],[4,"c_void",343],[6,"c_double",343],[3,"CString",344],[15,"tuple"],[3,"Vec",345],[15,"i64"],[15,"bool"],[4,"Pauli",0],[15,"u32"],[15,"u64"],[15,"i8"],[15,"i32"],[3,"BigInt",346],[15,"u8"],[3,"Callable",218],[6,"c_char",343],[3,"BigUint",347],[6,"Complex64",348],[15,"usize"],[3,"Formatter",349],[3,"Error",349],[4,"Result",350],[3,"Range",309],[15,"str"],[8,"Display",349],[3,"Error",351],[3,"TypeId",352],[6,"c_double",353],[3,"OutputRecorder",273],[3,"Drain",354],[15,"slice"]],"b":[]},\
"qir_runner":{"doc":"","t":"F","n":["main"],"q":[[0,"qir_runner"],[1,"alloc::string"],[2,"core::result"]],"d":[""],"i":[0],"f":[[[],[[3,[1,2]]]]],"c":[],"p":[[15,"tuple"],[3,"String",1],[4,"Result",2]],"b":[]},\
"qir_stdlib":{"doc":"Rust Implementation for Quantum Intermediate Representation","t":"NENNNFFFAALLALLLLLAAAALLLALLDFFFFFFFLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFRRDFFFFFFLLLLLLLALFFLLLLLLLFFFFFFFFFDLLMLLFFMMLLLLFFFFFFFFFFFFFFF","n":["I","Pauli","X","Y","Z","__quantum__rt__fail","__quantum__rt__memory_allocate","__quantum__rt__message","arrays","bigints","borrow","borrow_mut","callables","clone","clone_into","fmt","from","into","math","output_recording","range_support","strings","to_owned","try_from","try_into","tuples","type_id","vzip","QirArray","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_update_reference_count","Callable","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__nan__body","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__tan__body","__quantum__qis__tanh__body","LINE_ENDING","OUTPUT","OutputRecorder","__quantum__rt__array_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__message_record_output","__quantum__rt__tuple_record_output","borrow","borrow_mut","default","drain","flush","from","into","legacy","read","record_output","record_output_str","try_from","try_into","type_id","use_std_out","vzip","write","write_newline","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","Range","borrow","borrow_mut","end","from","into","quantum__rt__array_slice_1d","quantum__rt__range_to_string","start","step","try_from","try_into","type_id","vzip","__quantum__rt__bigint_to_string","__quantum__rt__bool_to_string","__quantum__rt__double_to_string","__quantum__rt__int_to_string","__quantum__rt__pauli_to_string","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count"],"q":[[0,"qir_stdlib"],[28,"qir_stdlib::arrays"],[48,"qir_stdlib::bigints"],[69,"qir_stdlib::callables"],[90,"qir_stdlib::math"],[110,"qir_stdlib::output_recording"],[137,"qir_stdlib::output_recording::legacy"],[146,"qir_stdlib::range_support"],[160,"qir_stdlib::strings"],[171,"qir_stdlib::tuples"],[175,"alloc::ffi::c_str"],[176,"core::fmt"],[177,"core::fmt"],[178,"core::any"],[179,"num_bigint::bigint"],[180,"core::ffi"],[181,"core::ffi"],[182,"std::io::error"],[183,"core::fmt"],[184,"std::os::raw"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds output messages from calls to the QIR output …","Inserts a marker in the generated output that indicates the","","","","","Inserts a marker in the generated output that indicates the","","","","Drains the buffer and returns the contents.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Records a value to the output.","Records a string to the output.","","","","Sets whether the output should be written to stdout or …","","","Writes the newline char(s) to the output.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[5,0,5,5,5,0,0,0,0,0,5,5,0,5,5,5,5,5,0,0,0,0,5,5,5,0,5,5,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,21,21,21,0,21,0,0,21,21,21,21,21,21,21,0,0,0,0,0,0,0,0,0,0,28,28,28,28,28,0,0,28,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,[1,2],[3,4],[1,2],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[5,5],[[-1,-2],2,[],[]],[[5,6],7],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,[-1,9,[]],[-1,-2,[],[]],0,[[10,10],10],[[10,11],10],[[12,3],10],[[10,3],13],[10,3],[[10,14],2],[[10,14],2],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[[-1,-2],2,[],[]],[[10,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,-2,[],[]],[[15,15],15],[[15,15],15],[15,15],[[15,15],15],[[15,15],15],[[12,4],15],[16,15],[[15,15],15],[[15,15],11],[15,4],[15,12],[[15,15],11],[[15,15],11],[[15,15],15],[[15,15],15],[15,15],[[15,12],15],[[15,3],15],[[15,3],15],[[15,15],15],[[15,14],2],0,[[17,11],17],[[4,4,4],17],[[17,4,4],2],[17,2],[17,2],[[17,14],2],[[17,14],2],[[17,14],2],[[17,14],2],[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[[-1,-2],2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,-2,[],[]],[18,18],[18,18],[[18,18],18],[18,18],[18,18],[18,18],[[18,18],19],[[16,16],16],[[18,18],18],[[],18],[18,11],[18,11],[18,11],[18,18],[[],18],[18,18],[18,18],[18,18],[18,18],[18,18],0,0,0,[[16,20],2],[[11,20],2],[[18,20],2],[[16,20],2],[1,2],[[16,20],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],21],[21,[[22,[4]]]],[21,[[23,[2]]]],[-1,-1,[]],[-1,-2,[],[]],0,[[21,[24,[4]]],[[23,[25]]]],[[26,27,20],[[23,[2]]]],[26,[[23,[2]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[[21,11],2],[-1,-2,[],[]],[[21,[24,[4]]],[[23,[25]]]],[21,2],[[],2],[16,2],[[],2],[11,2],[18,2],[16,2],[[],2],[16,2],[[],2],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-2,[],[]],[[10,28],10],[28,1],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,-2,[],[]],[15,1],[11,1],[29,1],[16,1],[5,1],[[1,1],1],[30,1],[[1,1],11],[1,30],[1,12],[[1,14],2],[[31,11],31],[3,31],[[31,14],2],[[31,14],2]],"c":[],"p":[[3,"CString",175],[15,"tuple"],[15,"u64"],[15,"u8"],[4,"Pauli",0],[3,"Formatter",176],[6,"Result",176],[4,"Result",177],[3,"TypeId",178],[3,"QirArray",28],[15,"bool"],[15,"u32"],[15,"i8"],[15,"i32"],[3,"BigInt",179],[15,"i64"],[3,"Callable",69],[6,"c_double",180],[15,"f64"],[6,"c_char",180],[3,"OutputRecorder",110],[3,"Drain",181],[6,"Result",182],[15,"slice"],[15,"usize"],[15,"str"],[8,"Display",176],[3,"Range",146],[6,"c_double",183],[6,"c_char",183],[3,"Vec",184]],"b":[]},\
"qirrunner":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]},\
"quantum_sparse_sim":{"doc":"Sparse State Quantum Simulator","t":"DGLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNNLLLLLLLL","n":["QuantumSim","SparseState","allocate","borrow","borrow_mut","default","dump","exp","exp","from","get_state","h","into","joint_measure","joint_probability","mcexp","mch","mcphase","mcrx","mcry","mcrz","mcs","mcsadj","mct","mctadj","mcx","mcy","mcz","measure","new","qubit_is_zero","release","rx","ry","rz","s","sadj","set_rng_seed","swap_qubit_ids","t","tadj","take_rng","try_from","try_into","type_id","vzip","x","y","z","I","Pauli","X","Y","Z","borrow","borrow_mut","from","into","try_from","try_into","type_id","vzip"],"q":[[0,"quantum_sparse_sim"],[49,"quantum_sparse_sim::exp"],[62,"alloc::string"],[63,"num_bigint::biguint"],[64,"num_complex"],[65,"alloc::vec"],[66,"rand::rngs::std"],[67,"core::option"],[68,"core::result"],[69,"core::any"]],"d":["The <code>QuantumSim</code> struct contains the necessary state for …","","Allocates a fresh qubit, returning its identifier. Note …","","","","Prints the current state vector to standard output with …","","Exp multi-qubit rotation gate.","Returns the argument unchanged.","Returns a sorted copy of the current sparse state as a …","Single qubit H gate.","Calls <code>U::from(self)</code>.","Performs a joint measurement to get the parity of the …","Checks the probability of parity measurement in the …","Multi-controlled Exp multi-qubit rotation gate.","Multi-controlled H gate.","Multi-controlled phase rotation (“G” gate).","Multi-controlled Rx gate.","Multi-controlled Ry gate.","Multi-controlled Rz gate.","Multi-controlled S gate.","Multi-controlled Adjoint S gate.","Multi-controlled T gate.","Multi-controlled Adjoint T gate.","Multi-controlled X gate.","Multi-controlled Y gate.","Multi-controlled Z gate.","Measures the qubit with the given id, collapsing the state …","Creates a new sparse state quantum simulator object with …","Checks the internal state of the given qubit and returns …","Releases the given qubit, collapsing its state in the …","Single qubit Rx gate.","Single qubit Ry gate.","Single qubit Rz gate.","Single qubit S gate.","Single qubit Adjoint S Gate.","Sets the seed for the random number generator used for …","Swaps the mapped ids for the given qubits.","Single qubit T gate.","Single qubit Adjoint T gate.","","","","","","Single qubit X gate.","Single qubit Y gate.","Single qubit Z gate.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,4,4,4,4,4,4,4,4,4,4,4],"f":[0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[1,3],0,[[1,[5,[4]],6,[5,[2]]],7],[-1,-1,[]],[1,[[7,[[10,[[7,[8,9]]]],2]]]],[[1,2],7],[-1,-2,[],[]],[[1,[5,[2]]],11],[[1,[5,[2]]],6],[[1,[5,[2]],[5,[4]],6,[5,[2]]],7],[[1,[5,[2]],2],7],[[1,[5,[2]],9,2],7],[[1,[5,[2]],6,2],7],[[1,[5,[2]],6,2],7],[[1,[5,[2]],6,2],7],[[1,[5,[2]],2],7],[[1,[5,[2]],2],7],[[1,[5,[2]],2],7],[[1,[5,[2]],2],7],[[1,[5,[2]],2],7],[[1,[5,[2]],2],7],[[1,[5,[2]],2],7],[[1,2],11],[[[13,[12]]],1],[[1,2],11],[[1,2],7],[[1,6,2],7],[[1,6,2],7],[[1,6,2],7],[[1,2],7],[[1,2],7],[[1,14],7],[[1,2,2],7],[[1,2],7],[[1,2],7],[1,12],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],[[1,2],7],[[1,2],7],[[1,2],7],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"QuantumSim",0],[15,"usize"],[3,"String",62],[4,"Pauli",49],[15,"slice"],[15,"f64"],[15,"tuple"],[3,"BigUint",63],[6,"Complex64",64],[3,"Vec",65],[15,"bool"],[3,"StdRng",66],[4,"Option",67],[15,"u64"],[4,"Result",68],[3,"TypeId",69]],"b":[]},\
"runner":{"doc":"","t":"DNRRDEDDNNNFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAALLAFLLMALLLAAFAAFFFAFFAFFFMMALLLALLDFFFFFFFLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFRRDFFFFFFLLLLLLLALFFLLLLLLLFFFFFFFFFDLLMLLFFMMLLLLFFFFFFFFFFFFFFFFFFFF","n":["Callable","I","LINE_ENDING","OUTPUT","OutputRecorder","Pauli","QirArray","Range","X","Y","Z","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__assertmeasurementprobability__body","__quantum__qis__assertmeasurementprobability__ctl","__quantum__qis__ccx__body","__quantum__qis__cnot__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__cx__body","__quantum__qis__cy__body","__quantum__qis__cz__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__dumpmachine__body","__quantum__qis__exp__adj","__quantum__qis__exp__body","__quantum__qis__exp__ctl","__quantum__qis__exp__ctladj","__quantum__qis__h__body","__quantum__qis__h__ctl","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__m__body","__quantum__qis__measure__body","__quantum__qis__mresetz__body","__quantum__qis__mz__body","__quantum__qis__nan__body","__quantum__qis__r__adj","__quantum__qis__r__body","__quantum__qis__r__ctl","__quantum__qis__r__ctladj","__quantum__qis__read_result__body","__quantum__qis__reset__body","__quantum__qis__rx__body","__quantum__qis__rx__ctl","__quantum__qis__rxx__body","__quantum__qis__ry__body","__quantum__qis__ry__ctl","__quantum__qis__ryy__body","__quantum__qis__rz__body","__quantum__qis__rz__ctl","__quantum__qis__rzz__body","__quantum__qis__s__adj","__quantum__qis__s__body","__quantum__qis__s__ctl","__quantum__qis__s__ctladj","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__swap__body","__quantum__qis__t__adj","__quantum__qis__t__body","__quantum__qis__t__ctl","__quantum__qis__t__ctladj","__quantum__qis__tan__body","__quantum__qis__tanh__body","__quantum__qis__x__body","__quantum__qis__x__ctl","__quantum__qis__y__body","__quantum__qis__y__ctl","__quantum__qis__z__body","__quantum__qis__z__ctl","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_record_output","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_to_string","__quantum__rt__bigint_update_reference_count","__quantum__rt__bool_record_output","__quantum__rt__bool_to_string","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","__quantum__rt__double_record_output","__quantum__rt__double_to_string","__quantum__rt__fail","__quantum__rt__initialize","__quantum__rt__int_record_output","__quantum__rt__int_to_string","__quantum__rt__memory_allocate","__quantum__rt__message","__quantum__rt__message_record_output","__quantum__rt__pauli_to_string","__quantum__rt__qubit_allocate","__quantum__rt__qubit_allocate_array","__quantum__rt__qubit_release","__quantum__rt__qubit_release_array","__quantum__rt__qubit_to_string","__quantum__rt__result_equal","__quantum__rt__result_get_one","__quantum__rt__result_get_zero","__quantum__rt__result_record_output","__quantum__rt__result_to_string","__quantum__rt__result_update_reference_count","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_record_output","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count","arrays","bigints","borrow","borrow_mut","callables","capture_quantum_state","clone","clone_into","end","exp","fmt","from","into","legacy","legacy_output","main","math","output_recording","quantum__rt__array_slice_1d","quantum__rt__range_to_string","qubit_is_zero","range_support","record_output","record_output_str","result_bool","run_bitcode","run_file","set_rng_seed","start","step","strings","to_owned","try_from","try_into","tuples","type_id","vzip","QirArray","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_update_reference_count","Callable","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__qis__exp__adj","__quantum__qis__exp__body","__quantum__qis__exp__ctl","__quantum__qis__exp__ctladj","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","__quantum__rt__result_record_output","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__nan__body","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__tan__body","__quantum__qis__tanh__body","LINE_ENDING","OUTPUT","OutputRecorder","__quantum__rt__array_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__message_record_output","__quantum__rt__tuple_record_output","borrow","borrow_mut","default","drain","flush","from","into","legacy","read","record_output","record_output_str","try_from","try_into","type_id","use_std_out","vzip","write","write_newline","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","Range","borrow","borrow_mut","end","from","into","quantum__rt__array_slice_1d","quantum__rt__range_to_string","start","step","try_from","try_into","type_id","vzip","__quantum__rt__result_equal","__quantum__rt__result_get_one","__quantum__rt__result_get_zero","__quantum__rt__result_to_string","__quantum__rt__result_update_reference_count","__quantum__rt__bigint_to_string","__quantum__rt__bool_to_string","__quantum__rt__double_to_string","__quantum__rt__int_to_string","__quantum__rt__pauli_to_string","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count"],"q":[[0,"runner"],[189,"runner::arrays"],[209,"runner::bigints"],[230,"runner::callables"],[251,"runner::exp"],[255,"runner::legacy"],[264,"runner::legacy_output"],[265,"runner::math"],[285,"runner::output_recording"],[312,"runner::output_recording::legacy"],[321,"runner::range_support"],[335,"runner::result_bool"],[340,"runner::strings"],[351,"runner::tuples"],[355,"core::ffi"],[356,"alloc::ffi::c_str"],[357,"alloc::vec"],[358,"num_bigint::bigint"],[359,"num_bigint::biguint"],[360,"num_complex"],[361,"core::fmt"],[362,"core::fmt"],[363,"core::option"],[364,"alloc::string"],[365,"core::iter::traits::collect"],[366,"core::fmt"],[367,"std::io"],[368,"std::path"],[369,"core::convert"],[370,"core::any"],[371,"alloc::vec::drain"]],"d":["","","","","Holds output messages from calls to the QIR output …","","","","","","","","","","","QIR API for checking internal simulator state and …","QIR API for checking internal simulator state and …","QIR API for performing the CCNOT gate with the given …","QIR API for performing the CNOT gate with the given qubits.","","","QIR API for performing the CNOT gate with the given qubits.","QIR API for performing the CY gate with the given qubits.","QIR API for performing the CZ gate with the given qubits.","","","QIR API for dumping full internal simulator state.","QIR API for applying an adjoint exponential of a …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","QIR API for performing the H gate on the given qubit.","QIR API for performing the multicontrolled H gate with the …","","","","","","","QIR API that measures a given qubit in the computational …","QIR API that performs joint measurement of the given …","QIR API for measuring the given qubit and storing the …","QIR API for measuring the given qubit in the computation …","","QIR API for applying an adjoint rotation about the given …","QIR API for applying a rotation about the given Pauli axis …","QIR API for applying a controlled rotation about the given …","QIR API for applying an adjoint controlled rotation about …","QIR API that reads the Boolean value corresponding to the …","QIR API for resetting the given qubit in the computational …","QIR API for applying a Pauli-X rotation with the given …","QIR API for applying a multicontrolled Pauli-X rotation …","QIR API for applying a joint rotation Pauli-Y rotation …","QIR API for applying a Pauli-Y rotation with the given …","QIR API for applying a multicontrolled Pauli-Y rotation …","QIR API for applying a joint rotation Pauli-Y rotation …","QIR API for applying a Pauli-Z rotation with the given …","QIR API for applying a multicontrolled Pauli-Z rotation …","QIR API for applying a joint rotation Pauli-Z rotation …","QIR API for performing the Adjoint S gate on the given …","QIR API for performing the S gate on the given qubit.","QIR API for performing the multicontrolled S gate with the …","QIR API for performing the multicontrolled Adjoint S gate …","","","","QIR API for applying a SWAP gate to the given qubits.","QIR API for performing the Adjoint T gate on the given …","QIR API for performing the T gate on the given qubit.","QIR API for performing the multicontrolled T gate with the …","QIR API for performing the multicontrolled Adjoint T gate …","","","QIR API for performing the X gate on the given qubit.","QIR API for performing the multicontrolled X gate with the …","QIR API for performing the Y gate on the given qubit.","QIR API for performing the multicontrolled Y gate with the …","QIR API for performing the Z gate on the given qubit.","QIR API for performing the multicontrolled Z gate with the …","","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes the execution environment.","","","","","","","QIR API that allocates the next available qubit in the …","QIR API for allocating the given number of qubits in the …","QIR API for releasing the given qubit from the simulation.","QIR API for releasing the given runtime managed qubit …","QIR API for getting the string interpretation of a qubit …","","","","QIR API for recording the given result into the program …","Panics","","","","","","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","Rust API for getting a snapshot of current quantum state. …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Errors","","","","","Rust API for checking internal simulator state and …","","Records a value to the output.","Records a string to the output.","","Errors","Errors","Sets the seed for the pseudo-random number generator used …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","QIR API for applying an adjoint exponential of a …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds output messages from calls to the QIR output …","Inserts a marker in the generated output that indicates the","","","","","Inserts a marker in the generated output that indicates the","","","","Drains the buffer and returns the contents.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Records a value to the output.","Records a string to the output.","","","","Sets whether the output should be written to stdout or …","","","Writes the newline char(s) to the output.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Panics","","","","","","","","","","","","","","","",""],"i":[0,9,0,0,0,0,0,0,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,9,9,26,0,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,26,0,9,9,9,0,9,9,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,35,35,35,35,35,0,35,0,0,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,0,0,26,26,26,26,26,0,0,26,26,26,26,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],[[1,1],1],[1,1],[[2,2,3,1,4,1],5],[[2,6],5],[[3,3,3],5],[[3,3],5],[1,1],[1,1],[[3,3],5],[[3,3],5],[[3,3],5],[[1,1],1],[[7,7],7],[3,5],[[2,1,2],5],[[2,1,2],5],[[2,6],5],[[2,6],5],[3,5],[[2,3],5],[[1,1],1],[[],1],[1,8],[1,8],[1,8],[1,1],[3,3],[[2,2],3],[[3,3],5],[[3,3],5],[[],1],[[9,1,3],5],[[9,1,3],5],[[2,6],5],[[2,6],5],[3,8],[3,5],[[1,3],5],[[2,6],5],[[1,3,3],5],[[1,3],5],[[2,6],5],[[1,3,3],5],[[1,3],5],[[2,6],5],[[1,3,3],5],[3,5],[3,5],[[2,3],5],[[2,3],5],[1,1],[1,1],[1,1],[[3,3],5],[3,5],[3,5],[[2,3],5],[[2,3],5],[1,1],[1,1],[3,5],[[2,3],5],[3,5],[[2,3],5],[3,5],[[2,3],5],[[2,2],2],[[2,8],2],[[10,11],2],[[2,11],12],[2,11],[[7,12],5],[[2,13],5],[[2,13],5],[[14,14],14],[[14,14],14],[14,14],[[14,14],14],[[14,14],14],[[10,15],14],[7,14],[[14,14],14],[[14,14],8],[14,15],[14,10],[[14,14],8],[[14,14],8],[[14,14],14],[[14,14],14],[14,14],[[14,10],14],[[14,11],14],[[14,11],14],[[14,14],14],[14,4],[[14,13],5],[[8,12],5],[8,4],[[16,8],16],[[15,15,15],16],[[16,15,15],5],[16,5],[16,5],[[16,13],5],[[16,13],5],[[16,13],5],[[16,13],5],[[1,12],5],[1,4],[4,5],[12,5],[[7,12],5],[7,4],[11,15],[4,5],[4,5],[9,4],[[],3],[11,2],[3,5],[2,5],[3,4],[[3,3],8],[[],3],[[],3],[[3,12],5],[3,4],[[3,13],5],[[4,4],4],[12,4],[[4,4],8],[4,12],[4,10],[[4,13],5],[[6,8],6],[11,6],[[7,12],5],[[6,13],5],[[6,13],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[5,[[6,[[5,[17,[18,[1]]]]]],19]]]],[9,9],[[-1,-2],5,[],[]],0,0,[[9,20],[[22,[5,21]]]],[-1,-1,[]],[-1,-2,[],[]],0,0,[[[23,[-1]]],[[22,[5,24]]],25],0,0,[[2,26],2],[26,4],[3,8],0,[[27,28,12],[[22,[5,29]]]],[27,[[22,[5,29]]]],0,[[[30,[15]],[23,[27]],10,-1],[[22,[5,24]]],31],[[-1,[23,[27]],10,[23,[11]],-2],[[22,[5,24]]],[[33,[32]]],31],[11,5],0,0,0,[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],0,[-1,34,[]],[-1,-2,[],[]],0,[[2,2],2],[[2,8],2],[[10,11],2],[[2,11],12],[2,11],[[2,13],5],[[2,13],5],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],5,[],[]],[[2,20],[[22,[5,21]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,34,[]],[-1,-2,[],[]],[[14,14],14],[[14,14],14],[14,14],[[14,14],14],[[14,14],14],[[10,15],14],[7,14],[[14,14],14],[[14,14],8],[14,15],[14,10],[[14,14],8],[[14,14],8],[[14,14],14],[[14,14],14],[14,14],[[14,10],14],[[14,11],14],[[14,11],14],[[14,14],14],[[14,13],5],0,[[16,8],16],[[15,15,15],16],[[16,15,15],5],[16,5],[16,5],[[16,13],5],[[16,13],5],[[16,13],5],[[16,13],5],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[-1,-2],5,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,34,[]],[-1,-2,[],[]],[[2,1,2],5],[[2,1,2],5],[[2,6],5],[[2,6],5],[[],5],[7,5],[[],5],[8,5],[1,5],[7,5],[[],5],[7,5],[[],5],[3,5],[1,1],[1,1],[[1,1],1],[1,1],[1,1],[1,1],[[1,1],1],[[7,7],7],[[1,1],1],[[],1],[1,8],[1,8],[1,8],[1,1],[[],1],[1,1],[1,1],[1,1],[1,1],[1,1],0,0,0,[[7,12],5],[[8,12],5],[[1,12],5],[[7,12],5],[4,5],[[7,12],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],35],[35,[[36,[15]]]],[35,[[22,[5,29]]]],[-1,-1,[]],[-1,-2,[],[]],0,[[35,[30,[15]]],[[22,[19,29]]]],[[27,28,12],[[22,[5,29]]]],[27,[[22,[5,29]]]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,34,[]],[[35,8],5],[-1,-2,[],[]],[[35,[30,[15]]],[[22,[19,29]]]],[35,5],[[],5],[7,5],[[],5],[8,5],[1,5],[7,5],[[],5],[7,5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-2,[],[]],[[2,26],2],[26,4],0,0,[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,34,[]],[-1,-2,[],[]],[[3,3],8],[[],3],[[],3],[3,4],[[3,13],5],[14,4],[8,4],[1,4],[7,4],[9,4],[[4,4],4],[12,4],[[4,4],8],[4,12],[4,10],[[4,13],5],[[6,8],6],[11,6],[[6,13],5],[[6,13],5]],"c":[],"p":[[15,"f64"],[3,"QirArray",189],[4,"c_void",355],[3,"CString",356],[15,"tuple"],[3,"Vec",357],[15,"i64"],[15,"bool"],[4,"Pauli",0],[15,"u32"],[15,"u64"],[15,"i8"],[15,"i32"],[3,"BigInt",358],[15,"u8"],[3,"Callable",230],[3,"BigUint",359],[3,"Complex",360],[15,"usize"],[3,"Formatter",361],[3,"Error",361],[4,"Result",362],[4,"Option",363],[3,"String",364],[8,"IntoIterator",365],[3,"Range",321],[15,"str"],[8,"Display",361],[3,"Error",366],[15,"slice"],[8,"Write",367],[3,"Path",368],[8,"AsRef",369],[3,"TypeId",370],[3,"OutputRecorder",285],[3,"Drain",371]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

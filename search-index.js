var searchIndex = JSON.parse('{\
"qir_backend":{"doc":"QIR compliant backend for quantum simulation.","t":[3,13,4,3,3,13,13,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,11,11,0,11,11,12,0,11,11,11,0,0,0,5,5,5,0,0,5,12,12,0,11,11,11,0,11,11,3,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,3,11,11,12,11,11,5,5,12,12,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["Callable","I","Pauli","QirArray","Range","X","Y","Z","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__assertmeasurementprobability__body","__quantum__qis__assertmeasurementprobability__ctl","__quantum__qis__ccx__body","__quantum__qis__cnot__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__cx__body","__quantum__qis__cy__body","__quantum__qis__cz__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__dumpmachine__body","__quantum__qis__h__body","__quantum__qis__h__ctl","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__m__body","__quantum__qis__measure__body","__quantum__qis__mz__body","__quantum__qis__nan__body","__quantum__qis__r__adj","__quantum__qis__r__body","__quantum__qis__r__ctl","__quantum__qis__r__ctladj","__quantum__qis__read_result__body","__quantum__qis__reset__body","__quantum__qis__rx__body","__quantum__qis__rx__ctl","__quantum__qis__rxx__body","__quantum__qis__ry__body","__quantum__qis__ry__ctl","__quantum__qis__ryy__body","__quantum__qis__rz__body","__quantum__qis__rz__ctl","__quantum__qis__rzz__body","__quantum__qis__s__adj","__quantum__qis__s__body","__quantum__qis__s__ctl","__quantum__qis__s__ctladj","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__swap__body","__quantum__qis__t__adj","__quantum__qis__t__body","__quantum__qis__t__ctl","__quantum__qis__t__ctladj","__quantum__qis__tan__body","__quantum__qis__tanh__body","__quantum__qis__x__body","__quantum__qis__x__ctl","__quantum__qis__y__body","__quantum__qis__y__ctl","__quantum__qis__z__body","__quantum__qis__z__ctl","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_record_output","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_to_string","__quantum__rt__bigint_update_reference_count","__quantum__rt__bool_record_output","__quantum__rt__bool_to_string","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","__quantum__rt__double_record_output","__quantum__rt__double_to_string","__quantum__rt__fail","__quantum__rt__initialize","__quantum__rt__int_record_output","__quantum__rt__int_to_string","__quantum__rt__memory_allocate","__quantum__rt__message","__quantum__rt__message_record_output","__quantum__rt__pauli_to_string","__quantum__rt__qubit_allocate","__quantum__rt__qubit_allocate_array","__quantum__rt__qubit_release","__quantum__rt__qubit_release_array","__quantum__rt__qubit_to_string","__quantum__rt__result_record_output","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_record_output","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count","arrays","bigints","borrow","borrow_mut","callables","clone","clone_into","end","exp","fmt","from","into","legacy","math","output_recording","quantum__rt__array_slice_1d","quantum__rt__range_to_string","qubit_is_zero","range_support","result_bool","set_rng_seed","start","step","strings","to_owned","try_from","try_into","tuples","type_id","vzip","QirArray","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_update_reference_count","Callable","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__qis__exp__adj","__quantum__qis__exp__body","__quantum__qis__exp__ctl","__quantum__qis__exp__ctladj","__quantum__rt__result_record_output","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__nan__body","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__tan__body","__quantum__qis__tanh__body","__quantum__rt__array_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__message_record_output","__quantum__rt__tuple_record_output","legacy","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","Range","borrow","borrow_mut","end","from","into","quantum__rt__array_slice_1d","quantum__rt__range_to_string","start","step","try_from","try_into","type_id","vzip","__quantum__rt__result_equal","__quantum__rt__result_get_one","__quantum__rt__result_get_zero","__quantum__rt__result_to_string","__quantum__rt__result_update_reference_count","__quantum__rt__bigint_to_string","__quantum__rt__bool_to_string","__quantum__rt__double_to_string","__quantum__rt__int_to_string","__quantum__rt__pauli_to_string","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count"],"q":["qir_backendqir_backend::arrays","","","","","","","","","","","","","","","","","","","","qir_backend::bigints","","","","","","","","","","","","","","","","","","","","","qir_backend::callables","","","","","","","","","","","","","","","","","","","","","qir_backend::exp","","","","qir_backend::legacy","qir_backend::math","","","","","","","","","","","","","","","","","","","","qir_backend::output_recording","","","","","","","qir_backend::output_recording::legacy","","","","","","","","","qir_backend::range_support","","","","","","","","","","","","","","qir_backend::result_bool","","","","","qir_backend::strings","","","","","","","","","","","qir_backend::tuples","","",""],"d":["","","","","","","","","","","","","QIR API for checking internal simulator state and …","QIR API for checking internal simulator state and …","QIR API for performing the CCNOT gate with the given …","QIR API for performing the CNOT gate with the given qubits.","","","QIR API for performing the CNOT gate with the given qubits.","QIR API for performing the CY gate with the given qubits.","QIR API for performing the CZ gate with the given qubits.","","","QIR API for dumping full internal simulator state.","QIR API for performing the H gate on the given qubit.","QIR API for performing the multicontrolled H gate with the …","","","","","","","QIR API that measures a given qubit in the computational …","QIR API that performs joint measurement of the given …","QIR API for measuring the given qubit in the computation …","","QIR API for applying an adjoint rotation about the given …","QIR API for applying a rotation about the given Pauli axis …","QIR API for applying a controlled rotation about the given …","QIR API for applying an adjoint controlled rotation about …","QIR API that reads the Boolean value corresponding to the …","QIR API for resetting the given qubit in the computational …","QIR API for applying a Pauli-X rotation with the given …","QIR API for applying a multicontrolled Pauli-X rotation …","QIR API for applying a joint rotation Pauli-Y rotation …","QIR API for applying a Pauli-Y rotation with the given …","QIR API for applying a multicontrolled Pauli-Y rotation …","QIR API for applying a joint rotation Pauli-Y rotation …","QIR API for applying a Pauli-Z rotation with the given …","QIR API for applying a multicontrolled Pauli-Z rotation …","QIR API for applying a joint rotation Pauli-Z rotation …","QIR API for performing the Adjoint S gate on the given …","QIR API for performing the S gate on the given qubit.","QIR API for performing the multicontrolled S gate with the …","QIR API for performing the multicontrolled Adjoint S gate …","","","","QIR API for applying a SWAP gate to the given qubits.","QIR API for performing the Adjoint T gate on the given …","QIR API for performing the T gate on the given qubit.","QIR API for performing the multicontrolled T gate with the …","QIR API for performing the multicontrolled Adjoint T gate …","","","QIR API for performing the X gate on the given qubit.","QIR API for performing the multicontrolled X gate with the …","QIR API for performing the Y gate on the given qubit.","QIR API for performing the multicontrolled Y gate with the …","QIR API for performing the Z gate on the given qubit.","QIR API for performing the multicontrolled Z gate with the …","","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes the execution environment.","","","","","","","QIR API that allocates the next available qubit in the …","QIR API for allocating the given number of qubits in the …","QIR API for releasing the given qubit from the simulation.","QIR API for releasing the given runtime managed qubit …","QIR API for getting the string interpretation of a qubit …","QIR API for recording the given result into the program …","","","","","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Rust API for checking internal simulator state and …","","","Sets the seed for the pseudo-random number generator used …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","QIR API for applying an adjoint exponential of a …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","","","","","","","","","","","","","","","","","","","","","","Inserts a marker in the generated output that indicates the","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,9,0,0,0,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,9,9,21,0,9,9,9,0,0,0,0,0,0,0,0,0,21,21,0,9,9,9,0,9,9,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,21,0,0,21,21,21,21,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,[1,1],[1,1],[[1,1],1],[1,1],[[2,2,3,4,5,4]],[[2,6]],[[3,3,3]],[[3,3]],[1,1],[1,1],[[3,3]],[[3,3]],[[3,3]],[[1,1],1],[[7,7],7],[3],[3],[[2,3]],[[1,1],1],[[],1],[1,8],[1,8],[1,8],[1,1],[3,3],[[2,2],3],[[3,3]],[[],1],[[9,4,3]],[[9,4,3]],[[2,6]],[[2,6]],[3,8],[3],[[4,3]],[[2,6]],[[4,3,3]],[[4,3]],[[2,6]],[[4,3,3]],[[4,3]],[[2,6]],[[4,3,3]],[3],[3],[[2,3]],[[2,3]],[1,1],[1,1],[1,1],[[3,3]],[3],[3],[[2,3]],[[2,3]],[1,1],[1,1],[3],[[2,3]],[3],[[2,3]],[3],[[2,3]],[[2,2],2],[[2,8],2],[[10,11],2],[[2,11],12],[2,11],[[7,12]],[[2,13]],[[2,13]],[[14,14],14],[[14,14],14],[14,14],[[14,14],14],[[14,14],14],[[10,15],14],[7,14],[[14,14],14],[[14,14],8],[14,15],[14,10],[[14,14],8],[[14,14],8],[[14,14],14],[[14,14],14],[14,14],[[14,10],14],[[14,11],14],[[14,11],14],[[14,14],14],[14,5],[[14,13]],[[8,12]],[8,5],[[16,8],16],[[15,15,15],16],[[16,15,15]],[16],[16],[[16,13]],[[16,13]],[[16,13]],[[16,13]],[[1,12]],[1,5],[5],[17],[[7,12]],[7,5],[11,15],[5],[5],[9,5],[[],3],[11,2],[3],[2],[3,5],[[3,17]],[[5,5],5],[12,5],[[5,5],8],[5,12],[5,10],[[5,13]],[[6,8],6],[11,6],[[7,12]],[[6,13]],[[6,13]],0,0,[[]],[[]],0,[9,9],[[]],0,0,[[9,18],[[20,[19]]]],[[]],[[]],0,0,0,[[2,21],2],[21,5],[3,8],0,0,[11],0,0,0,[[]],[[],20],[[],20],0,[[],22],[[]],0,[[2,2],2],[[2,8],2],[[10,11],2],[[2,11],12],[2,11],[[2,13]],[[2,13]],[[]],[[]],[2,2],[[]],[[2,18],[[20,[19]]]],[[]],[[]],[[]],[[],20],[[],20],[[],22],[[]],[[14,14],14],[[14,14],14],[14,14],[[14,14],14],[[14,14],14],[[10,15],14],[7,14],[[14,14],14],[[14,14],8],[14,15],[14,10],[[14,14],8],[[14,14],8],[[14,14],14],[[14,14],14],[14,14],[[14,10],14],[[14,11],14],[[14,11],14],[[14,14],14],[[14,13]],0,[[16,8],16],[[15,15,15],16],[[16,15,15]],[16],[16],[[16,13]],[[16,13]],[[16,13]],[[16,13]],[[]],[[]],[16,16],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],22],[[]],[[2,23,2]],[[2,23,2]],[[2,6]],[[2,6]],[3],[1,1],[1,1],[[1,1],1],[1,1],[1,1],[1,1],[[1,1],1],[[7,7],7],[[1,1],1],[[],1],[1,8],[1,8],[1,8],[1,1],[[],1],[1,1],[1,1],[1,1],[1,1],[1,1],[[7,12]],[[8,12]],[[1,12]],[[7,12]],[5],[[7,12]],0,[[]],[7],[[]],[8],[1],[7],[[]],[7],[[]],0,[[]],[[]],0,[[]],[[]],[[2,21],2],[21,5],0,0,[[],20],[[],20],[[],22],[[]],[[3,3],8],[[],3],[[],3],[3,5],[[3,13]],[14,5],[8,5],[1,5],[7,5],[9,5],[[5,5],5],[12,5],[[5,5],8],[5,12],[5,10],[[5,13]],[[6,8],6],[11,6],[[6,13]],[[6,13]]],"p":[[15,"f64"],[3,"QirArray"],[4,"c_void"],[6,"c_double"],[3,"CString"],[3,"Vec"],[15,"i64"],[15,"bool"],[4,"Pauli"],[15,"u32"],[15,"u64"],[15,"i8"],[15,"i32"],[3,"BigInt"],[15,"u8"],[3,"Callable"],[6,"c_char"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Range"],[3,"TypeId"],[6,"c_double"]]},\
"qir_runner":{"doc":"","t":[3,13,4,3,3,13,13,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,11,11,0,11,11,12,0,11,11,11,0,0,0,5,5,5,0,0,5,5,5,12,12,0,11,11,11,0,11,11,3,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,3,11,11,12,11,11,5,5,12,12,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["Callable","I","Pauli","QirArray","Range","X","Y","Z","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__assertmeasurementprobability__body","__quantum__qis__assertmeasurementprobability__ctl","__quantum__qis__ccx__body","__quantum__qis__cnot__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__cx__body","__quantum__qis__cy__body","__quantum__qis__cz__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__dumpmachine__body","__quantum__qis__exp__adj","__quantum__qis__exp__body","__quantum__qis__exp__ctl","__quantum__qis__exp__ctladj","__quantum__qis__h__body","__quantum__qis__h__ctl","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__m__body","__quantum__qis__measure__body","__quantum__qis__mz__body","__quantum__qis__nan__body","__quantum__qis__r__adj","__quantum__qis__r__body","__quantum__qis__r__ctl","__quantum__qis__r__ctladj","__quantum__qis__read_result__body","__quantum__qis__reset__body","__quantum__qis__rx__body","__quantum__qis__rx__ctl","__quantum__qis__rxx__body","__quantum__qis__ry__body","__quantum__qis__ry__ctl","__quantum__qis__ryy__body","__quantum__qis__rz__body","__quantum__qis__rz__ctl","__quantum__qis__rzz__body","__quantum__qis__s__adj","__quantum__qis__s__body","__quantum__qis__s__ctl","__quantum__qis__s__ctladj","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__swap__body","__quantum__qis__t__adj","__quantum__qis__t__body","__quantum__qis__t__ctl","__quantum__qis__t__ctladj","__quantum__qis__tan__body","__quantum__qis__tanh__body","__quantum__qis__x__body","__quantum__qis__x__ctl","__quantum__qis__y__body","__quantum__qis__y__ctl","__quantum__qis__z__body","__quantum__qis__z__ctl","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_record_output","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_to_string","__quantum__rt__bigint_update_reference_count","__quantum__rt__bool_record_output","__quantum__rt__bool_to_string","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","__quantum__rt__double_record_output","__quantum__rt__double_to_string","__quantum__rt__fail","__quantum__rt__initialize","__quantum__rt__int_record_output","__quantum__rt__int_to_string","__quantum__rt__memory_allocate","__quantum__rt__message","__quantum__rt__message_record_output","__quantum__rt__pauli_to_string","__quantum__rt__qubit_allocate","__quantum__rt__qubit_allocate_array","__quantum__rt__qubit_release","__quantum__rt__qubit_release_array","__quantum__rt__qubit_to_string","__quantum__rt__result_equal","__quantum__rt__result_get_one","__quantum__rt__result_get_zero","__quantum__rt__result_record_output","__quantum__rt__result_to_string","__quantum__rt__result_update_reference_count","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_record_output","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count","arrays","bigints","borrow","borrow_mut","callables","clone","clone_into","end","exp","fmt","from","into","legacy","math","output_recording","quantum__rt__array_slice_1d","quantum__rt__range_to_string","qubit_is_zero","range_support","result_bool","run_bitcode","run_file","set_rng_seed","start","step","strings","to_owned","try_from","try_into","tuples","type_id","vzip","QirArray","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_update_reference_count","Callable","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__qis__exp__adj","__quantum__qis__exp__body","__quantum__qis__exp__ctl","__quantum__qis__exp__ctladj","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__nan__body","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__tan__body","__quantum__qis__tanh__body","__quantum__rt__array_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__message_record_output","__quantum__rt__tuple_record_output","legacy","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","Range","borrow","borrow_mut","end","from","into","quantum__rt__array_slice_1d","quantum__rt__range_to_string","start","step","try_from","try_into","type_id","vzip","__quantum__rt__result_equal","__quantum__rt__result_get_one","__quantum__rt__result_get_zero","__quantum__rt__result_to_string","__quantum__rt__result_update_reference_count","__quantum__rt__bigint_to_string","__quantum__rt__bool_to_string","__quantum__rt__double_to_string","__quantum__rt__int_to_string","__quantum__rt__pauli_to_string","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count"],"q":["qir_runner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","qir_runner::arrays","","","","","","","","","","","","","","","","","","","","qir_runner::bigints","","","","","","","","","","","","","","","","","","","","","qir_runner::callables","","","","","","","","","","","","","","","","","","","","","qir_runner::exp","","","","qir_runner::legacy","","","","","","","","","qir_runner::math","","","","","","","","","","","","","","","","","","","","qir_runner::output_recording","","","","","","","qir_runner::output_recording::legacy","","","","","","","","","qir_runner::range_support","","","","","","","","","","","","","","qir_runner::result_bool","","","","","qir_runner::strings","","","","","","","","","","","qir_runner::tuples","","",""],"d":["","","","","","","","","","","","","QIR API for checking internal simulator state and …","QIR API for checking internal simulator state and …","QIR API for performing the CCNOT gate with the given …","QIR API for performing the CNOT gate with the given qubits.","","","QIR API for performing the CNOT gate with the given qubits.","QIR API for performing the CY gate with the given qubits.","QIR API for performing the CZ gate with the given qubits.","","","QIR API for dumping full internal simulator state.","QIR API for applying an adjoint exponential of a …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","QIR API for performing the H gate on the given qubit.","QIR API for performing the multicontrolled H gate with the …","","","","","","","QIR API that measures a given qubit in the computational …","QIR API that performs joint measurement of the given …","QIR API for measuring the given qubit in the computation …","","QIR API for applying an adjoint rotation about the given …","QIR API for applying a rotation about the given Pauli axis …","QIR API for applying a controlled rotation about the given …","QIR API for applying an adjoint controlled rotation about …","QIR API that reads the Boolean value corresponding to the …","QIR API for resetting the given qubit in the computational …","QIR API for applying a Pauli-X rotation with the given …","QIR API for applying a multicontrolled Pauli-X rotation …","QIR API for applying a joint rotation Pauli-Y rotation …","QIR API for applying a Pauli-Y rotation with the given …","QIR API for applying a multicontrolled Pauli-Y rotation …","QIR API for applying a joint rotation Pauli-Y rotation …","QIR API for applying a Pauli-Z rotation with the given …","QIR API for applying a multicontrolled Pauli-Z rotation …","QIR API for applying a joint rotation Pauli-Z rotation …","QIR API for performing the Adjoint S gate on the given …","QIR API for performing the S gate on the given qubit.","QIR API for performing the multicontrolled S gate with the …","QIR API for performing the multicontrolled Adjoint S gate …","","","","QIR API for applying a SWAP gate to the given qubits.","QIR API for performing the Adjoint T gate on the given …","QIR API for performing the T gate on the given qubit.","QIR API for performing the multicontrolled T gate with the …","QIR API for performing the multicontrolled Adjoint T gate …","","","QIR API for performing the X gate on the given qubit.","QIR API for performing the multicontrolled X gate with the …","QIR API for performing the Y gate on the given qubit.","QIR API for performing the multicontrolled Y gate with the …","QIR API for performing the Z gate on the given qubit.","QIR API for performing the multicontrolled Z gate with the …","","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes the execution environment.","","","","","","","QIR API that allocates the next available qubit in the …","QIR API for allocating the given number of qubits in the …","QIR API for releasing the given qubit from the simulation.","QIR API for releasing the given runtime managed qubit …","QIR API for getting the string interpretation of a qubit …","","","","QIR API for recording the given result into the program …","","","","","","","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Rust API for checking internal simulator state and …","","","Errors","Errors","Sets the seed for the pseudo-random number generator used …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","QIR API for applying an adjoint exponential of a …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","QIR API for applying an exponential of a multi-qubit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a marker in the generated output that indicates the","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,8,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,8,8,19,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,19,19,0,8,8,8,0,8,8,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,0,0,19,19,19,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,[1,1],[1,1],[[1,1],1],[1,1],[[2,2,3,1,4,1]],[[2,5]],[[3,3,3]],[[3,3]],[1,1],[1,1],[[3,3]],[[3,3]],[[3,3]],[[1,1],1],[[6,6],6],[3],[[2,1,2]],[[2,1,2]],[[2,5]],[[2,5]],[3],[[2,3]],[[1,1],1],[[],1],[1,7],[1,7],[1,7],[1,1],[3,3],[[2,2],3],[[3,3]],[[],1],[[8,1,3]],[[8,1,3]],[[2,5]],[[2,5]],[3,7],[3],[[1,3]],[[2,5]],[[1,3,3]],[[1,3]],[[2,5]],[[1,3,3]],[[1,3]],[[2,5]],[[1,3,3]],[3],[3],[[2,3]],[[2,3]],[1,1],[1,1],[1,1],[[3,3]],[3],[3],[[2,3]],[[2,3]],[1,1],[1,1],[3],[[2,3]],[3],[[2,3]],[3],[[2,3]],[[2,2],2],[[2,7],2],[[9,10],2],[[2,10],11],[2,10],[[6,11]],[[2,12]],[[2,12]],[[13,13],13],[[13,13],13],[13,13],[[13,13],13],[[13,13],13],[[9,14],13],[6,13],[[13,13],13],[[13,13],7],[13,14],[13,9],[[13,13],7],[[13,13],7],[[13,13],13],[[13,13],13],[13,13],[[13,9],13],[[13,10],13],[[13,10],13],[[13,13],13],[13,4],[[13,12]],[[7,11]],[7,4],[[15,7],15],[[14,14,14],15],[[15,14,14]],[15],[15],[[15,12]],[[15,12]],[[15,12]],[[15,12]],[[1,11]],[1,4],[4],[11],[[6,11]],[6,4],[10,14],[4],[4],[8,4],[[],3],[10,2],[3],[2],[3,4],[[3,3],7],[[],3],[[],3],[[3,11]],[3,4],[[3,12]],[[4,4],4],[11,4],[[4,4],7],[4,11],[4,9],[[4,12]],[[5,7],5],[10,5],[[6,11]],[[5,12]],[[5,12]],0,0,[[]],[[]],0,[8,8],[[]],0,0,[[8,16],[[18,[17]]]],[[]],[[]],0,0,0,[[2,19],2],[19,4],[3,7],0,0,[[[21,[20]],9],[[18,[22]]]],[[[24,[23]],[21,[20]],9],[[18,[22]]]],[10],0,0,0,[[]],[[],18],[[],18],0,[[],25],[[]],0,[[2,2],2],[[2,7],2],[[9,10],2],[[2,10],11],[2,10],[[2,12]],[[2,12]],[[]],[[]],[2,2],[[]],[[2,16],[[18,[17]]]],[[]],[[]],[[]],[[],18],[[],18],[[],25],[[]],[[13,13],13],[[13,13],13],[13,13],[[13,13],13],[[13,13],13],[[9,14],13],[6,13],[[13,13],13],[[13,13],7],[13,14],[13,9],[[13,13],7],[[13,13],7],[[13,13],13],[[13,13],13],[13,13],[[13,9],13],[[13,10],13],[[13,10],13],[[13,13],13],[[13,12]],0,[[15,7],15],[[14,14,14],15],[[15,14,14]],[15],[15],[[15,12]],[[15,12]],[[15,12]],[[15,12]],[[]],[[]],[15,15],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],25],[[]],[[2,1,2]],[[2,1,2]],[[2,5]],[[2,5]],[[]],[6],[[]],[7],[1],[6],[[]],[6],[[]],[1,1],[1,1],[[1,1],1],[1,1],[1,1],[1,1],[[1,1],1],[[6,6],6],[[1,1],1],[[],1],[1,7],[1,7],[1,7],[1,1],[[],1],[1,1],[1,1],[1,1],[1,1],[1,1],[[6,11]],[[7,11]],[[1,11]],[[6,11]],[4],[[6,11]],0,[[]],[6],[[]],[7],[1],[6],[[]],[6],[[]],0,[[]],[[]],0,[[]],[[]],[[2,19],2],[19,4],0,0,[[],18],[[],18],[[],25],[[]],[[3,3],7],[[],3],[[],3],[3,4],[[3,12]],[13,4],[7,4],[1,4],[6,4],[8,4],[[4,4],4],[11,4],[[4,4],7],[4,11],[4,9],[[4,12]],[[5,7],5],[10,5],[[5,12]],[[5,12]]],"p":[[15,"f64"],[3,"QirArray"],[4,"c_void"],[3,"CString"],[3,"Vec"],[15,"i64"],[15,"bool"],[4,"Pauli"],[15,"u32"],[15,"u64"],[15,"i8"],[15,"i32"],[3,"BigInt"],[15,"u8"],[3,"Callable"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Range"],[15,"str"],[4,"Option"],[3,"String"],[3,"Path"],[8,"AsRef"],[3,"TypeId"]]},\
"qir_stdlib":{"doc":"Rust Implementation for Quantum Intermediate Representation","t":[13,4,13,13,13,5,5,5,0,0,11,11,0,11,11,11,11,11,0,0,0,0,11,11,11,0,11,11,3,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,3,11,11,12,11,11,5,5,12,12,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["I","Pauli","X","Y","Z","__quantum__rt__fail","__quantum__rt__memory_allocate","__quantum__rt__message","arrays","bigints","borrow","borrow_mut","callables","clone","clone_into","fmt","from","into","math","output_recording","range_support","strings","to_owned","try_from","try_into","tuples","type_id","vzip","QirArray","__quantum__rt__array_concatenate","__quantum__rt__array_copy","__quantum__rt__array_create_1d","__quantum__rt__array_get_element_ptr_1d","__quantum__rt__array_get_size_1d","__quantum__rt__array_update_alias_count","__quantum__rt__array_update_reference_count","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__rt__bigint_add","__quantum__rt__bigint_bitand","__quantum__rt__bigint_bitnot","__quantum__rt__bigint_bitor","__quantum__rt__bigint_bitxor","__quantum__rt__bigint_create_array","__quantum__rt__bigint_create_i64","__quantum__rt__bigint_divide","__quantum__rt__bigint_equal","__quantum__rt__bigint_get_data","__quantum__rt__bigint_get_length","__quantum__rt__bigint_greater","__quantum__rt__bigint_greater_eq","__quantum__rt__bigint_modulus","__quantum__rt__bigint_multiply","__quantum__rt__bigint_negate","__quantum__rt__bigint_power","__quantum__rt__bigint_shiftleft","__quantum__rt__bigint_shiftright","__quantum__rt__bigint_subtract","__quantum__rt__bigint_update_reference_count","Callable","__quantum__rt__callable_copy","__quantum__rt__callable_create","__quantum__rt__callable_invoke","__quantum__rt__callable_make_adjoint","__quantum__rt__callable_make_controlled","__quantum__rt__callable_update_alias_count","__quantum__rt__callable_update_reference_count","__quantum__rt__capture_update_alias_count","__quantum__rt__capture_update_reference_count","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","vzip","__quantum__qis__arccos__body","__quantum__qis__arcsin__body","__quantum__qis__arctan2__body","__quantum__qis__arctan__body","__quantum__qis__cos__body","__quantum__qis__cosh__body","__quantum__qis__drawrandomdouble__body","__quantum__qis__drawrandomint__body","__quantum__qis__ieeeremainder__body","__quantum__qis__infinity__body","__quantum__qis__isinf__body","__quantum__qis__isnan__body","__quantum__qis__isnegativeinfinity__body","__quantum__qis__log__body","__quantum__qis__nan__body","__quantum__qis__sin__body","__quantum__qis__sinh__body","__quantum__qis__sqrt__body","__quantum__qis__tan__body","__quantum__qis__tanh__body","__quantum__rt__array_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__message_record_output","__quantum__rt__tuple_record_output","legacy","__quantum__rt__array_end_record_output","__quantum__rt__array_record_output","__quantum__rt__array_start_record_output","__quantum__rt__bool_record_output","__quantum__rt__double_record_output","__quantum__rt__int_record_output","__quantum__rt__tuple_end_record_output","__quantum__rt__tuple_record_output","__quantum__rt__tuple_start_record_output","Range","borrow","borrow_mut","end","from","into","quantum__rt__array_slice_1d","quantum__rt__range_to_string","start","step","try_from","try_into","type_id","vzip","__quantum__rt__bigint_to_string","__quantum__rt__bool_to_string","__quantum__rt__double_to_string","__quantum__rt__int_to_string","__quantum__rt__pauli_to_string","__quantum__rt__string_concatenate","__quantum__rt__string_create","__quantum__rt__string_equal","__quantum__rt__string_get_data","__quantum__rt__string_get_length","__quantum__rt__string_update_reference_count","__quantum__rt__tuple_copy","__quantum__rt__tuple_create","__quantum__rt__tuple_update_alias_count","__quantum__rt__tuple_update_reference_count"],"q":["qir_stdlib","","","","","","","","","","","","","","","","","","","","","","","","","","","","qir_stdlib::arrays","","","","","","","","","","","","","","","","","","","","qir_stdlib::bigints","","","","","","","","","","","","","","","","","","","","","qir_stdlib::callables","","","","","","","","","","","","","","","","","","","","","qir_stdlib::math","","","","","","","","","","","","","","","","","","","","qir_stdlib::output_recording","","","","","","","qir_stdlib::output_recording::legacy","","","","","","","","","qir_stdlib::range_support","","","","","","","","","","","","","","qir_stdlib::strings","","","","","","","","","","","qir_stdlib::tuples","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a marker in the generated output that indicates the","","","","","Inserts a marker in the generated output that indicates the","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,0,4,4,4,0,0,0,0,0,4,4,0,4,4,4,4,4,0,0,0,0,4,4,4,0,4,4,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,0,0,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,[1],[2,3],[1],0,0,[[]],[[]],0,[4,4],[[]],[[4,5],6],[[]],[[]],0,0,0,0,[[]],[[],7],[[],7],0,[[],8],[[]],0,[[9,9],9],[[9,10],9],[[11,2],9],[[9,2],12],[9,2],[[9,13]],[[9,13]],[[]],[[]],[9,9],[[]],[[9,5],6],[[]],[[]],[[]],[[],7],[[],7],[[],8],[[]],[[14,14],14],[[14,14],14],[14,14],[[14,14],14],[[14,14],14],[[11,3],14],[15,14],[[14,14],14],[[14,14],10],[14,3],[14,11],[[14,14],10],[[14,14],10],[[14,14],14],[[14,14],14],[14,14],[[14,11],14],[[14,2],14],[[14,2],14],[[14,14],14],[[14,13]],0,[[16,10],16],[[3,3,3],16],[[16,3,3]],[16],[16],[[16,13]],[[16,13]],[[16,13]],[[16,13]],[[]],[[]],[16,16],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],8],[[]],[17,17],[17,17],[[17,17],17],[17,17],[17,17],[17,17],[[17,17],18],[[15,15],15],[[17,17],17],[[],17],[17,10],[17,10],[17,10],[17,17],[[],17],[17,17],[17,17],[17,17],[17,17],[17,17],[[15,19]],[[10,19]],[[17,19]],[[15,19]],[1],[[15,19]],0,[[]],[15],[[]],[10],[17],[15],[[]],[15],[[]],0,[[]],[[]],0,[[]],[[]],[[9,20],9],[20,1],0,0,[[],7],[[],7],[[],8],[[]],[14,1],[10,1],[21,1],[15,1],[4,1],[[1,1],1],[22,1],[[1,1],10],[1,22],[1,11],[[1,13]],[[23,10],23],[2,23],[[23,13]],[[23,13]]],"p":[[3,"CString"],[15,"u64"],[15,"u8"],[4,"Pauli"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"QirArray"],[15,"bool"],[15,"u32"],[15,"i8"],[15,"i32"],[3,"BigInt"],[15,"i64"],[3,"Callable"],[6,"c_double"],[15,"f64"],[6,"c_char"],[3,"Range"],[6,"c_double"],[6,"c_char"],[3,"Vec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

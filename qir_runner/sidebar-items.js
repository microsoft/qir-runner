window.SIDEBAR_ITEMS = {"enum":[["Pauli",""]],"fn":[["__quantum__qis__arccos__body",""],["__quantum__qis__arcsin__body",""],["__quantum__qis__arctan2__body",""],["__quantum__qis__arctan__body",""],["__quantum__qis__assertmeasurementprobability__body","QIR API for checking internal simulator state and verifying the probability of the given parity measurement result for the given qubits in the given Pauli bases is equal to the expected probability, within the given tolerance."],["__quantum__qis__assertmeasurementprobability__ctl","QIR API for checking internal simulator state and verifying the probability of the given parity measurement result for the given qubits in the given Pauli bases is equal to the expected probability, within the given tolerance. Note that control qubits are ignored."],["__quantum__qis__ccx__body","QIR API for performing the CCNOT gate with the given qubits."],["__quantum__qis__cnot__body","QIR API for performing the CNOT gate with the given qubits."],["__quantum__qis__cos__body",""],["__quantum__qis__cosh__body",""],["__quantum__qis__cx__body","QIR API for performing the CNOT gate with the given qubits."],["__quantum__qis__cy__body","QIR API for performing the CY gate with the given qubits."],["__quantum__qis__cz__body","QIR API for performing the CZ gate with the given qubits."],["__quantum__qis__drawrandomdouble__body",""],["__quantum__qis__drawrandomint__body",""],["__quantum__qis__dumpmachine__body","QIR API for dumping full internal simulator state."],["__quantum__qis__exp__adj","QIR API for applying an adjoint exponential of a multi-qubit rotation about the given Pauli axes with the given angle and qubits."],["__quantum__qis__exp__body","QIR API for applying an exponential of a multi-qubit rotation about the given Pauli axes with the given angle and qubits."],["__quantum__qis__exp__ctl","QIR API for applying an exponential of a multi-qubit rotation about the given Pauli axes with the given angle and qubits."],["__quantum__qis__exp__ctladj","QIR API for applying an exponential of a multi-qubit rotation about the given Pauli axes with the given angle and qubits."],["__quantum__qis__h__body","QIR API for performing the H gate on the given qubit."],["__quantum__qis__h__ctl","QIR API for performing the multicontrolled H gate with the given qubits."],["__quantum__qis__ieeeremainder__body",""],["__quantum__qis__infinity__body",""],["__quantum__qis__isinf__body",""],["__quantum__qis__isnan__body",""],["__quantum__qis__isnegativeinfinity__body",""],["__quantum__qis__log__body",""],["__quantum__qis__m__body","QIR API that measures a given qubit in the computational basis, returning a runtime managed result value."],["__quantum__qis__measure__body","QIR API that performs joint measurement of the given qubits in the corresponding Pauli bases, returning the parity as a runtime managed result value."],["__quantum__qis__mresetz__body","QIR API for measuring the given qubit and then resetting it in the computational basis."],["__quantum__qis__mz__body","QIR API for measuring the given qubit in the computation basis and storing the measured value with the given result identifier."],["__quantum__qis__nan__body",""],["__quantum__qis__r__adj","QIR API for applying an adjoint rotation about the given Pauli axis with the given angle and qubit."],["__quantum__qis__r__body","QIR API for applying a rotation about the given Pauli axis with the given angle and qubit."],["__quantum__qis__r__ctl","QIR API for applying a controlled rotation about the given Pauli axis with the given angle and qubit."],["__quantum__qis__r__ctladj","QIR API for applying an adjoint controlled rotation about the given Pauli axis with the given angle and qubit."],["__quantum__qis__read_result__body","QIR API that reads the Boolean value corresponding to the given result identifier, where true indicates a |1⟩ state and false indicates a |0⟩ state."],["__quantum__qis__reset__body","QIR API for resetting the given qubit in the computational basis."],["__quantum__qis__rx__body","QIR API for applying a Pauli-X rotation with the given angle and qubit."],["__quantum__qis__rx__ctl","QIR API for applying a multicontrolled Pauli-X rotation with the given angle and qubit."],["__quantum__qis__rxx__body","QIR API for applying a joint rotation Pauli-Y rotation with the given angle for the two target qubit."],["__quantum__qis__ry__body","QIR API for applying a Pauli-Y rotation with the given angle and qubit."],["__quantum__qis__ry__ctl","QIR API for applying a multicontrolled Pauli-Y rotation with the given angle and qubit."],["__quantum__qis__ryy__body","QIR API for applying a joint rotation Pauli-Y rotation with the given angle for the two target qubit."],["__quantum__qis__rz__body","QIR API for applying a Pauli-Z rotation with the given angle and qubit."],["__quantum__qis__rz__ctl","QIR API for applying a multicontrolled Pauli-Z rotation with the given angle and qubit."],["__quantum__qis__rzz__body","QIR API for applying a joint rotation Pauli-Z rotation with the given angle for the two target qubit."],["__quantum__qis__s__adj","QIR API for performing the Adjoint S gate on the given qubit."],["__quantum__qis__s__body","QIR API for performing the S gate on the given qubit."],["__quantum__qis__s__ctl","QIR API for performing the multicontrolled S gate with the given qubits."],["__quantum__qis__s__ctladj","QIR API for performing the multicontrolled Adjoint S gate with the given qubits."],["__quantum__qis__sin__body",""],["__quantum__qis__sinh__body",""],["__quantum__qis__sqrt__body",""],["__quantum__qis__swap__body","QIR API for applying a SWAP gate to the given qubits."],["__quantum__qis__t__adj","QIR API for performing the Adjoint T gate on the given qubit."],["__quantum__qis__t__body","QIR API for performing the T gate on the given qubit."],["__quantum__qis__t__ctl","QIR API for performing the multicontrolled T gate with the given qubits."],["__quantum__qis__t__ctladj","QIR API for performing the multicontrolled Adjoint T gate with the given qubits."],["__quantum__qis__tan__body",""],["__quantum__qis__tanh__body",""],["__quantum__qis__x__body","QIR API for performing the X gate on the given qubit."],["__quantum__qis__x__ctl","QIR API for performing the multicontrolled X gate with the given qubits."],["__quantum__qis__y__body","QIR API for performing the Y gate on the given qubit."],["__quantum__qis__y__ctl","QIR API for performing the multicontrolled Y gate with the given qubits."],["__quantum__qis__z__body","QIR API for performing the Z gate on the given qubit."],["__quantum__qis__z__ctl","QIR API for performing the multicontrolled Z gate with the given qubits."],["__quantum__rt__array_concatenate",""],["__quantum__rt__array_copy",""],["__quantum__rt__array_create_1d",""],["__quantum__rt__array_get_element_ptr_1d",""],["__quantum__rt__array_get_size_1d",""],["__quantum__rt__array_record_output","Inserts a marker in the generated output that indicates the start of an array and how many array elements it has. The second parameter defines a string label for the array. Depending on the output schema, the label is included in the output or omitted."],["__quantum__rt__array_update_alias_count",""],["__quantum__rt__array_update_reference_count",""],["__quantum__rt__bigint_add",""],["__quantum__rt__bigint_bitand",""],["__quantum__rt__bigint_bitnot",""],["__quantum__rt__bigint_bitor",""],["__quantum__rt__bigint_bitxor",""],["__quantum__rt__bigint_create_array",""],["__quantum__rt__bigint_create_i64",""],["__quantum__rt__bigint_divide",""],["__quantum__rt__bigint_equal",""],["__quantum__rt__bigint_get_data",""],["__quantum__rt__bigint_get_length",""],["__quantum__rt__bigint_greater",""],["__quantum__rt__bigint_greater_eq",""],["__quantum__rt__bigint_modulus",""],["__quantum__rt__bigint_multiply",""],["__quantum__rt__bigint_negate",""],["__quantum__rt__bigint_power",""],["__quantum__rt__bigint_shiftleft",""],["__quantum__rt__bigint_shiftright",""],["__quantum__rt__bigint_subtract",""],["__quantum__rt__bigint_to_string",""],["__quantum__rt__bigint_update_reference_count",""],["__quantum__rt__bool_record_output",""],["__quantum__rt__bool_to_string",""],["__quantum__rt__callable_copy",""],["__quantum__rt__callable_create",""],["__quantum__rt__callable_invoke",""],["__quantum__rt__callable_make_adjoint",""],["__quantum__rt__callable_make_controlled",""],["__quantum__rt__callable_update_alias_count",""],["__quantum__rt__callable_update_reference_count",""],["__quantum__rt__capture_update_alias_count",""],["__quantum__rt__capture_update_reference_count",""],["__quantum__rt__double_record_output",""],["__quantum__rt__double_to_string",""],["__quantum__rt__fail",""],["__quantum__rt__initialize","Initializes the execution environment."],["__quantum__rt__int_record_output",""],["__quantum__rt__int_to_string",""],["__quantum__rt__memory_allocate",""],["__quantum__rt__message",""],["__quantum__rt__message_record_output",""],["__quantum__rt__pauli_to_string",""],["__quantum__rt__qubit_allocate","QIR API that allocates the next available qubit in the simulation."],["__quantum__rt__qubit_allocate_array","QIR API for allocating the given number of qubits in the simulation, returning them as a runtime managed array."],["__quantum__rt__qubit_release","QIR API for releasing the given qubit from the simulation."],["__quantum__rt__qubit_release_array","QIR API for releasing the given runtime managed qubit array."],["__quantum__rt__qubit_to_string","QIR API for getting the string interpretation of a qubit identifier."],["__quantum__rt__result_equal",""],["__quantum__rt__result_get_one",""],["__quantum__rt__result_get_zero",""],["__quantum__rt__result_record_output","QIR API for recording the given result into the program output."],["__quantum__rt__result_to_string",""],["__quantum__rt__result_update_reference_count",""],["__quantum__rt__string_concatenate",""],["__quantum__rt__string_create",""],["__quantum__rt__string_equal",""],["__quantum__rt__string_get_data",""],["__quantum__rt__string_get_length",""],["__quantum__rt__string_update_reference_count",""],["__quantum__rt__tuple_copy",""],["__quantum__rt__tuple_create",""],["__quantum__rt__tuple_record_output","Inserts a marker in the generated output that indicates the start of a tuple and how many tuple elements it has. The second parameter defines a string label for the tuple. Depending on the output schema, the label is included in the output or omitted."],["__quantum__rt__tuple_update_alias_count",""],["__quantum__rt__tuple_update_reference_count",""],["capture_quantum_state","Rust API for getting a snapshot of current quantum state."],["quantum__rt__array_slice_1d",""],["quantum__rt__range_to_string",""],["qubit_is_zero","Rust API for checking internal simulator state and returning true only if the given qubit is in exactly the |0⟩ state."],["run_bitcode","Errors"],["run_file","Errors"],["set_rng_seed","Sets the seed for the pseudo-random number generator used during measurements."]],"mod":[["arrays",""],["bigints",""],["callables",""],["exp",""],["legacy",""],["math",""],["output_recording",""],["range_support",""],["result_bool",""],["strings",""],["tuples",""]],"struct":[["Callable",""],["QirArray",""],["Range",""]]};
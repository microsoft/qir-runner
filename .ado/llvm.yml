parameters:
- name: version
  type: string
- name: os
  type: string
- name: arch
  type: string
- name: directory
  type: string
- name: arch_flags
  type: string

steps:
- pwsh: New-Item -ItemType Directory -Path ${{ parameters.directory }} -Force
  displayName: Ensure cache dir exists

- task: Cache@2
  inputs:
    key: '"llvm-${{ parameters.version }}-${{ parameters.arch }}-${{ parameters.os }}"'
    restoreKeys: '"llvm-${{ parameters.version }}-${{ parameters.arch }}-${{ parameters.os }}"'
    path: ${{ parameters.directory }}
    cacheHitVar: CACHE_RESTORED
  displayName: Cache LLVM

- pwsh: |
    git config --global core.longpaths true
    Write-Host "##vso[task.setvariable variable=QIRLIB_CACHE_DIR;]${{ parameters.directory }}"
    Write-Host "##vso[task.setvariable variable=LLVM_SYS_140_PREFIX;]${{ parameters.directory }}"
    Write-Host "##vso[task.setvariable variable=PYQIR_LLVM_FEATURE_VERSION;]llvm${{ parameters.version }}-0"
    Write-Host "##vso[task.setvariable variable=QIRLIB_DOWNLOAD_LLVM;]false"
  displayName: Configure Environment

# prerequisites for building
- pwsh: |
    sudo apt-get install -y ninja-build
  displayName: Install build dependencies
  condition: and(eq(variables['Agent.OS'], 'Linux'), ne(variables.CACHE_RESTORED, 'true'))

- pwsh: |
    brew install ninja
  displayName: Install build dependencies
  condition: and(eq(variables['Agent.OS'], 'Darwin'), ne(variables.CACHE_RESTORED, 'true'))

- pwsh: |
    choco install --accept-license -y ninja
  displayName: Install build dependencies
  condition: and(eq(variables['Agent.OS'], 'Windows_NT'), ne(variables.CACHE_RESTORED, 'true'))

# build and install LLVM

- pwsh: |
    $vcvars = Join-Path "$(Build.SourcesDirectory)" "llvm-build" "vcvars.ps1"
    if(Test-Path $vcvars) { . $vcvars } else { throw "$vcvars not found" }
    cd (Join-Path "$(Build.SourcesDirectory)" "llvm-build")
    cargo build --release --features llvm14-0 -vv
  displayName: Build LLVM (non-Mac)
  condition: and(not(canceled()), not(failed()), ne(variables.CACHE_RESTORED, 'true'), ne(variables['Agent.OS'], 'Darwin'))

- pwsh: |
    cd (Join-Path "$(Build.SourcesDirectory)" "llvm-build")
    env ARCHFLAGS="${{ parameters.arch_flags }}" cargo build --release --features llvm14-0 -vv
  displayName: Build LLVM (Mac)
  condition: and(not(canceled()), not(failed()), ne(variables.CACHE_RESTORED, 'true'), eq(variables['Agent.OS'], 'Darwin'))

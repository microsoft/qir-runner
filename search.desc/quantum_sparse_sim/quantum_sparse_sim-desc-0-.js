searchState.loadedDescShard("quantum_sparse_sim", 0, "Sparse State Quantum Simulator\nThe <code>QuantumSim</code> struct contains the necessary state for …\nAllocates a fresh qubit, returning its identifier. Note …\nApplies the given unitary to the given targets, extending …\nExtends the given unitary matrix into a matrix …\nPrints the current state vector to standard output with …\nExp multi-qubit rotation gate.\nReturns the argument unchanged.\nReturns a sorted copy of the current sparse state as a …\nSingle qubit H gate.\nCalls <code>U::from(self)</code>.\nPerforms a joint measurement to get the parity of the …\nChecks the probability of parity measurement in the …\nMulti-controlled Exp multi-qubit rotation gate.\nMulti-controlled H gate.\nMulti-controlled phase rotation (“G” gate).\nMulti-controlled Rx gate.\nMulti-controlled Ry gate.\nMulti-controlled Rz gate.\nMulti-controlled S gate.\nMulti-controlled Adjoint S gate.\nMulti-controlled T gate.\nMulti-controlled Adjoint T gate.\nMulti-controlled X gate.\nMulti-controlled Y gate.\nMulti-controlled Z gate.\nMeasures the qubit with the given id, collapsing the state …\nCreates a new sparse state quantum simulator object with …\nChecks the internal state of the given qubit and returns …\nReleases the given qubit, collapsing its state in the …\nSingle qubit Rx gate.\nSingle qubit Ry gate.\nSingle qubit Rz gate.\nSingle qubit S gate.\nSingle qubit Adjoint S Gate.\nSets the seed for the random number generator used for …\nSwaps the mapped ids for the given qubits.\nSingle qubit T gate.\nSingle qubit Adjoint T gate.\nSingle qubit X gate.\nSingle qubit Y gate.\nSingle qubit Z gate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")